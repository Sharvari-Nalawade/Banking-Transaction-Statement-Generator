CODE:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

#define MAX_TRANSACTIONS 5
#define MAX_USERS 5

// Colors
#define RESET   "\033[0m"
#define RED     "\033[1;31m"
#define GREEN   "\033[1;32m"
#define YELLOW  "\033[1;33m"
#define CYAN    "\033[1;36m"
#define MAGENTA "\033[1;35m"
#define BOLD    "\033[1m"

typedef struct {
    char type[20];
    float amount;
    char date[30];
} Transaction;

typedef struct {
    int accountNumber;
    char name[50];
    int pin;
    float balance;
    Transaction transactions[MAX_TRANSACTIONS];
    int transactionCount;
} Account;

// Function declarations
int findAccount(Account accounts[], int count, int accountNumber);
int verifyPIN(Account *acc);
void deposit(Account *acc);
void withdraw(Account *acc);
void displayMiniStatement(Account *acc);
void saveToFile(Account accounts[], int count);
void loadFromFile(Account accounts[], int *count);
void getCurrentDate(char *buffer);
void loadingAnimation(const char *message);
void generateReceipt(Account *acc, Transaction *t);

// ---------------- MAIN PROGRAM ----------------
int main() {
    Account accounts[MAX_USERS];
    int accountCount = 0;
    int choice, accNum, index;

    loadFromFile(accounts, &accountCount);

    while (1) {
        printf("\n%s==============================%s\n", CYAN, RESET);
        printf("%süè¶  SMART SECURE BANKING SYSTEM%s\n", YELLOW, RESET);
        printf("%s==============================%s\n", CYAN, RESET);
        printf("%s1.%s Create New Account\n", GREEN, RESET);
        printf("%s2.%s Deposit Money\n", GREEN, RESET);
        printf("%s3.%s Withdraw Money\n", GREEN, RESET);
        printf("%s4.%s View Mini Statement\n", GREEN, RESET);
        printf("%s5.%s Exit\n", GREEN, RESET);
        printf("%s==============================%s\n", CYAN, RESET);
        printf("%sEnter your choice:%s ", BOLD, RESET);
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            if (accountCount < MAX_USERS) {
                printf("\nEnter Account Number: ");
                scanf("%d", &accounts[accountCount].accountNumber);
                printf("Enter Account Holder Name: ");
                scanf(" %[^\n]", accounts[accountCount].name);
                printf("Set a 4-digit PIN: ");
                scanf("%d", &accounts[accountCount].pin);

                if (accounts[accountCount].pin < 1000 || accounts[accountCount].pin > 9999) {
                    printf("%s‚ùå Invalid PIN! Please use exactly 4 digits.%s\n", RED, RESET);
                    break;
                }

                accounts[accountCount].balance = 0.0;
                accounts[accountCount].transactionCount = 0;
                loadingAnimation("Creating secure account");
                printf("%s‚úÖ Account created successfully!%s\n", GREEN, RESET);
                accountCount++;
            } else {
                printf("%s‚ùå Maximum account limit reached!%s\n", RED, RESET);
            }
            break;

        case 2:
            printf("\nEnter Account Number: ");
            scanf("%d", &accNum);
            index = findAccount(accounts, accountCount, accNum);
            if (index != -1 && verifyPIN(&accounts[index]))
                deposit(&accounts[index]);
            else
                printf("%s‚ùå Authentication failed!%s\n", RED, RESET);
            break;

        case 3:
            printf("\nEnter Account Number: ");
            scanf("%d", &accNum);
            index = findAccount(accounts, accountCount, accNum);
            if (index != -1 && verifyPIN(&accounts[index]))
                withdraw(&accounts[index]);
            else
                printf("%s‚ùå Authentication failed!%s\n", RED, RESET);
            break;

        case 4:
            printf("\nEnter Account Number: ");
            scanf("%d", &accNum);
            index = findAccount(accounts, accountCount, accNum);
            if (index != -1 && verifyPIN(&accounts[index]))
                displayMiniStatement(&accounts[index]);
            else
                printf("%s‚ùå Authentication failed!%s\n", RED, RESET);
            break;

        case 5:
            loadingAnimation("Saving data");
            saveToFile(accounts, accountCount);
            printf("\n%süíæ Data saved successfully!%s\n", GREEN, RESET);
            printf("%süëã Thank you for using Smart Secure Bank!%s\n", CYAN, RESET);
            exit(0);

        default:
            printf("%s‚ùå Invalid choice! Please try again.%s\n", RED, RESET);
        }
    }
    return 0;
}

// ---------------- FUNCTIONS ----------------

int findAccount(Account accounts[], int count, int accountNumber) {
    for (int i = 0; i < count; i++)
        if (accounts[i].accountNumber == accountNumber)
            return i;
    return -1;
}

int verifyPIN(Account *acc) {
    int attempts = 3, enteredPIN;
    while (attempts--) {
        printf("Enter 4-digit PIN: ");
        scanf("%d", &enteredPIN);

        if (enteredPIN == acc->pin) {
            printf("%süîì PIN verified successfully!%s\n", GREEN, RESET);
            return 1;
        } else {
            printf("%s‚ùå Incorrect PIN! Attempts left: %d%s\n", RED, attempts, RESET);
        }
    }
    printf("%süö´ Account temporarily locked for security reasons.%s\n", RED, RESET);
    return 0;
}

void getCurrentDate(char *buffer) {
    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    strftime(buffer, 30, "%d-%m-%Y %H:%M:%S", tm_info);
}

void loadingAnimation(const char *message) {
    printf("\n%s%s", CYAN, message);
    fflush(stdout);
    for (int i = 0; i < 3; i++) {
        printf(".");
        fflush(stdout);
        usleep(400000);
    }
    printf("%s\n", RESET);
}

void generateReceipt(Account *acc, Transaction *t) {
    char filename[100], timestamp[20];
    time_t now = time(NULL);
    struct tm *tm_info = localtime(&now);
    strftime(timestamp, sizeof(timestamp), "%Y%m%d_%H%M%S", tm_info);
    sprintf(filename, "receipt_%d_%s.txt", acc->accountNumber, timestamp);

    FILE *fp = fopen(filename, "w");
    if (fp == NULL) {
        printf("%s‚ö†Ô∏è  Could not generate receipt!%s\n", RED, RESET);
        return;
    }

    fprintf(fp, "=============================================\n");
    fprintf(fp, "              SMART SECURE BANK\n");
    fprintf(fp, "=============================================\n");
    fprintf(fp, "Date/Time     : %s\n", t->date);
    fprintf(fp, "Account No.   : %d\n", acc->accountNumber);
    fprintf(fp, "Account Holder: %s\n", acc->name);
    fprintf(fp, "---------------------------------------------\n");
    fprintf(fp, "Transaction   : %s\n", t->type);
    fprintf(fp, "Amount (‚Çπ)    : %.2f\n", t->amount);
    fprintf(fp, "Remaining Bal : ‚Çπ%.2f\n", acc->balance);
    fprintf(fp, "---------------------------------------------\n");
    fprintf(fp, "Thank you for banking with us!\n");
    fprintf(fp, "Authorized Signature: ____________\n");
    fprintf(fp, "=============================================\n");
    fclose(fp);

    printf("%süßæ Receipt generated: %s%s\n", GREEN, filename, RESET);
}

void deposit(Account *acc) {
    float amount;
    printf("Enter amount to deposit: ‚Çπ");
    scanf("%f", &amount);

    if (amount <= 0) {
        printf("%s‚ùå Invalid amount!%s\n", RED, RESET);
        return;
    }

    loadingAnimation("Processing deposit");
    acc->balance += amount;

    Transaction t;
    strcpy(t.type, "Deposit");
    t.amount = amount;
    getCurrentDate(t.date);

    if (acc->transactionCount < MAX_TRANSACTIONS)
        acc->transactions[acc->transactionCount++] = t;
    else {
        for (int i = 1; i < MAX_TRANSACTIONS; i++)
            acc->transactions[i - 1] = acc->transactions[i];
        acc->transactions[MAX_TRANSACTIONS - 1] = t;
    }

    printf("%s‚úÖ ‚Çπ%.2f deposited successfully!%s\n", GREEN, amount, RESET);
    printf("%süí∞ Current Balance: ‚Çπ%.2f%s\n", YELLOW, acc->balance, RESET);

    generateReceipt(acc, &t);
}

void withdraw(Account *acc) {
    float amount;
    printf("Enter amount to withdraw: ‚Çπ");
    scanf("%f", &amount);

    if (amount <= 0) {
        printf("%s‚ùå Invalid amount!%s\n", RED, RESET);
        return;
    }
    if (amount > acc->balance) {
        printf("%s‚ö†Ô∏è  Insufficient balance! Available: ‚Çπ%.2f%s\n", RED, acc->balance, RESET);
        return;
    }

    loadingAnimation("Processing withdrawal");
    acc->balance -= amount;

    Transaction t;
    strcpy(t.type, "Withdrawal");
    t.amount = amount;
    getCurrentDate(t.date);

    if (acc->transactionCount < MAX_TRANSACTIONS)
        acc->transactions[acc->transactionCount++] = t;
    else {
        for (int i = 1; i < MAX_TRANSACTIONS; i++)
            acc->transactions[i - 1] = acc->transactions[i];
        acc->transactions[MAX_TRANSACTIONS - 1] = t;
    }

    printf("%s‚úÖ ‚Çπ%.2f withdrawn successfully!%s\n", GREEN, amount, RESET);
    printf("%süí∞ Current Balance: ‚Çπ%.2f%s\n", YELLOW, acc->balance, RESET);

    generateReceipt(acc, &t);
}

void displayMiniStatement(Account *acc) {
    printf("\n%s==============================%s\n", CYAN, RESET);
    printf("%s       üßæ MINI STATEMENT%s\n", MAGENTA, RESET);
    printf("%s==============================%s\n", CYAN, RESET);
    printf("%sAccount No:%s %d\n", YELLOW, RESET, acc->accountNumber);
    printf("%sName:%s %s\n", YELLOW, RESET, acc->name);
    printf("%sBalance:%s ‚Çπ%.2f\n", YELLOW, RESET, acc->balance);
    printf("%s------------------------------%s\n", CYAN, RESET);

    if (acc->transactionCount == 0)
        printf("%sNo transactions yet.%s\n", RED, RESET);
    else {
        for (int i = 0; i < acc->transactionCount; i++)
            printf("%d. %-10s ‚Çπ%-10.2f [%s]\n", i + 1,
                   acc->transactions[i].type,
                   acc->transactions[i].amount,
                   acc->transactions[i].date);
    }
    printf("%s==============================%s\n", CYAN, RESET);
}

void saveToFile(Account accounts[], int count) {
    FILE *fp = fopen("bank_data.txt", "wb");
    if (!fp) {
        printf("%s‚ùå Error saving data!%s\n", RED, RESET);
        return;
    }
    fwrite(&count, sizeof(int), 1, fp);
    fwrite(accounts, sizeof(Account), count, fp);
    fclose(fp);
}

void loadFromFile(Account accounts[], int *count) {
    FILE *fp = fopen("bank_data.txt", "rb");
    if (!fp) {
        *count = 0;
        return;
    }
    fread(count, sizeof(int), 1, fp);
    fread(accounts, sizeof(Account), *count, fp);
    fclose(fp);
}
OutPut:
==============================
üè¶  SMART SECURE BANKING SYSTEM
==============================
1. Create New Account
2. Deposit Money
3. Withdraw Money
4. View Mini Statement
5. Exit
==============================
Enter your choice: 1

Enter Account Number: 12345
Enter Account Holder Name: Sharvari
Set a 4-digit PIN: 1212

Creating secure account...
‚úÖ Account created successfully!

==============================
üè¶  SMART SECURE BANKING SYSTEM
==============================
1. Create New Account
2. Deposit Money
3. Withdraw Money
4. View Mini Statement
5. Exit
==============================
Enter your choice: 2

Enter Account Number: 1000
‚ùå Authentication failed!

==============================
üè¶  SMART SECURE BANKING SYSTEM
==============================
1. Create New Account
2. Deposit Money
3. Withdraw Money
4. View Mini Statement
5. Exit
==============================
Enter your choice: 2

Enter Account Number: 12345
Enter 4-digit PIN: 1212
üîì PIN verified successfully!
Enter amount to deposit: ‚Çπ10000

Processing deposit...
‚úÖ ‚Çπ10000.00 deposited successfully!
üí∞ Current Balance: ‚Çπ10000.00
‚ö†Ô∏è  Could not generate receipt!

==============================
üè¶  SMART SECURE BANKING SYSTEM
==============================
1. Create New Account
2. Deposit Money
3. Withdraw Money
4. View Mini Statement
5. Exit
==============================
Enter your choice: 3

Enter Account Number: 12345
Enter 4-digit PIN: 1212
üîì PIN verified successfully!
Enter amount to withdraw: ‚Çπ300

Processing withdrawal...
‚úÖ ‚Çπ300.00 withdrawn successfully!
üí∞ Current Balance: ‚Çπ9700.00
‚ö†Ô∏è  Could not generate receipt!

==============================
üè¶  SMART SECURE BANKING SYSTEM
==============================
1. Create New Account
2. Deposit Money
3. Withdraw Money
4. View Mini Statement
5. Exit
==============================
Enter your choice: 4

Enter Account Number: 12345
Enter 4-digit PIN: 1212
üîì PIN verified successfully!

==============================
       üßæ MINI STATEMENT
==============================
Account No: 12345
Name: Sharvari
Balance: ‚Çπ9700.00
------------------------------
1. Deposit    ‚Çπ10000.00   [29-10-2025 06:11:56]
2. Withdrawal ‚Çπ300.00     [29-10-2025 06:12:21]
==============================

==============================
üè¶  SMART SECURE BANKING SYSTEM
==============================
1. Create New Account
2. Deposit Money
3. Withdraw Money
4. View Mini Statement
5. Exit
==============================
Enter your choice: 5

Saving data...
‚ùå Error saving data!

üíæ Data saved successfully!
üëã Thank you for using Smart Secure Bank!


=== Code Execution Successful ===
